#Instalação do Laravel 5.8

    > composer global require laravel/installer

# Criando um Projeto

    > laravel new blog

# Iniciando o Projeto

    > composer install
    > npm install
    > php artisan serve

    Crie um arquivo chamado .env, com base no .env.example e mude as configurações para o seu banco de dados.
    Execute o comando para instalar as tabelas basicas:

    > php artisan migrate

# Instale o Passport

    > php artisan passport:install

    Altera o arquivo App\User.php

    `
        <?php

            namespace App;

            use Illuminate\Foundation\Auth\User as Authenticatable;
            use Illuminate\Notifications\Notifiable;
            use Laravel\Passport\HasApiTokens;  // adicionar 

            class User extends Authenticatable
            {
                use HasApiTokens, Notifiable; // adicionar 
                ... resto do código ... 
            }
    
    `

# Crie uma rota de teste em routes\api.php

    `
        Route::post('/cadastro',function (Request $request){
        
            $user = User::create([
                'name' => $request['name'],
                'email' => $request['email'],
                'password' => bcrypt($request['password']),
            ]);
            $user->token = $user->createToken($user->email)->accessToken; // É necessario para buscar as informaçoes do usuario

            return $user;
        });
    `

# Crie uma rota para pegar as informaçoes do usuario

    `
        Route::middleware('auth:api')->get('/user', function (Request $request) {
            return $request->user();
        });
    `

    Para testar usando o POSTMAN voce deve criar uma requisição do tipo GET, com `Authorization Type = Bearer Token`, e passar o Token gerado para o $user->token;

# Utiizando validador do Laravel em suas Rotas

    `
        use Illuminate\Support\Facades\Validator; // Importa o validador

        Route::post('/cadastro',function (Request $request){
            $data = $request->all();
            $validator = Validator::make($data, [
                'name' => ['required', 'string', 'max:255'],
                'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
                'password' => ['required', 'string', 'min:8', 'confirmed'],
            ]); // Passa $data para o validador

            if($validator->fails()){
                return $validator->errors();
            } // Retorna os erros
        }
    `
    *validator - Confirmed = Necessita que seja enviado o campo + campo_confirmation, para passar na verificaçao.
    Ex: password E password_confirmation

# Instalando traduções

    > composer require lucascudo/laravel-pt-br-localization
    > php artisan vendor:publish --tag=laravel-pt-br-localization

    Alterar o arquivo config\app.php
        `
            'locale' => 'pt-BR',
        `
    Pause o servidor e ligue denovo
    > Crtl+C 
    > php artisan serve

# Criando rota de login, retornando dados do usuario + token

    Crie uma rota para o login, pegue as informaçoes utilize o validator, crie um accessToken e retorne o usuario.
    `
        Route::post('/login',function(Request $request){
            $data = $request->all();
            $validator = Validator::make($data, [
                'email' => ['required', 'string', 'email', 'max:255'],
                'password' => ['required', 'string'],
            ]);

            if($validator->fails()){
                return $validator->errors();
            }

            if(Auth::attempt([
                'email' =>$data['email'],
                'password' => $data['password']
            ])){
                $user = auth()->user(); // The auth function returns an authenticator instance. You may use it instead of the Auth facade for convenience:
                $user->token = $user->createToken($user->email)->accessToken;
                return $user;
            }else{
                return false;
            }

            return $request->all();

        });
    `

# Entendendo Tokens

    Managing Personal Access Tokens
    Once you have created a personal access client, you may issue tokens for a given user using the createToken method on the User model instance.
    The createToken method accepts the name of the token as its first argument and an optional array of scopes as its second argument:
    `
        $user = App\User::find(1);

        // Creating a token without scopes...
        $token = $user->createToken('Token Name')->accessToken;

        // Creating a token with scopes...
        $token = $user->createToken('My Token', ['place-orders'])->accessToken;
    `
# 